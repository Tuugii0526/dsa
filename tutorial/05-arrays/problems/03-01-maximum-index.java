
import java.util.ArrayList;

// Java program to find the maximum
// j - i such that arr[i] <= arr[j]

class SoftP050301 {
public static int binary (ArrayList<Integer> dec,int currentNumber,int [] arr){
 int start=0, end= dec.size()-1;
 int minimumIndexForCurrentNumber=dec.get(dec.size()-1);
 while(start<=end){
    int mid= start + (end-start)/2;
    if(currentNumber<arr[dec.get(mid)]){
        start=mid+1;
    }
    else {
        minimumIndexForCurrentNumber=dec.get(mid);
        end=mid-1;
            }
 }
 return minimumIndexForCurrentNumber;
}
public static int maxIndDif(int [] arr){
    ArrayList<Integer> dec=new ArrayList<>();
    dec.add(0);
    int max=0;
    for(int i=1;i<arr.length;i++){
        if(arr[i]<arr[dec.get(dec.size()-1)]){
dec.add(i);
        }
        else {
           int smallIndex= binary(dec,arr[i],arr);
           max=Math.max(max,i-smallIndex);
        }
    }
    return max;

}
public static void main(String[] args) {
    int [] arr= new int[]{
        446, 591, 173, 70, 755, 418, 805, 540, 742, 229, 693, 310, 302, 265, 28, 851, 56, 928, 331, 99, 292, 681, 156, 235, 416, 861, 853, 397, 435, 234, 647, 942, 133, 141, 706, 924, 950, 525, 780, 695, 196, 414, 58, 630, 760, 580, 677, 478, 291, 552, 945, 495, 277, 79, 498, 496, 463, 529, 440, 108, 90, 480, 957, 612, 23, 610, 755, 39, 936, 440, 11, 967, 95, 184, 212, 702, 285, 896, 665, 913, 717, 612, 391, 220, 107, 377, 685, 750, 191, 555, 292, 550, 503, 740, 433, 390, 68, 174, 56, 936, 739, 51, 795, 590, 542, 883, 940, 525, 836, 670, 655, 661, 319, 418, 996, 178, 260, 487, 404, 735, 121, 801, 241, 188, 170, 646, 907, 205, 748, 209, 832, 134, 829, 830, 908, 35, 243, 663, 585, 260, 285, 406, 184, 769, 375, 947, 881, 970, 970, 977, 448, 731, 371, 636, 376, 414, 107, 182, 620, 457, 679, 131, 332, 777, 896, 905, 461, 623, 965, 107, 516, 66, 952, 568, 196, 829, 303, 751, 190, 819, 916, 998, 16, 328, 359, 164, 577, 314, 242, 916, 988, 928, 541, 323, 827, 705, 379, 451, 206, 449, 308, 73, 588, 959, 677, 131, 810, 978, 813, 814, 858, 413, 226, 823, 717, 128, 635, 993, 211, 906, 487, 71, 530, 412, 614, 906, 918, 455, 861, 605, 608, 921, 240, 919, 218, 188, 444, 800, 250, 967, 987, 392, 77, 137, 475, 844, 30, 347, 817, 699, 975, 365, 970, 992, 479, 780, 242, 504, 620, 722, 680, 783, 699, 527, 794, 206, 846, 623, 221, 792, 149, 20, 200, 244, 528, 998, 761, 109, 612, 975, 584, 361, 284, 563, 499, 375, 634, 680, 369, 477, 350, 899, 387, 825, 990, 764, 64, 534, 167, 370, 728, 512, 83, 210, 195, 564, 987, 4, 91, 946, 527, 318, 751, 332, 347, 69, 634, 268, 508, 841, 771, 921, 172, 537, 214, 922, 330, 743, 283, 470, 134, 925, 61, 723, 195, 920, 550, 118, 182, 787, 921, 642, 942, 455, 432, 396, 932, 74, 615, 375, 717, 534, 57, 203, 781, 116, 377, 388, 742, 816, 748, 320, 26, 15, 141, 768, 110, 78, 672, 106, 935, 444, 227, 535, 969, 83, 570, 377, 526, 771, 667, 751, 820, 112, 201, 892, 826, 348, 308, 117, 891, 184, 49, 658, 844, 992, 726, 646, 787, 924, 33, 466, 25, 462, 129, 383, 826, 905, 245, 67, 409, 742, 460, 806, 249, 165, 477, 829, 746, 802, 120, 430, 849, 822, 683, 493, 379, 904, 866, 942, 363, 707, 241, 941, 554, 562, 268, 531, 438, 169, 297, 529, 887, 733, 348, 298, 77, 671, 987, 587, 774, 277, 907, 463, 559, 554, 675, 409, 216, 728, 823, 896, 381, 58, 200, 706, 347, 854, 194, 674, 304, 203, 470, 796, 53, 720, 969, 180, 784, 613, 205, 481, 165, 966, 750, 7, 910, 213, 184, 421, 195, 903, 775, 332, 27, 850, 646, 442, 323, 380
    };
    System.out.println(maxIndDif(arr));
}
}